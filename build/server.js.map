{"version":3,"sources":["../src/server.js"],"names":["renderPage","body","server","Hapi","Server","connection","port","start","console","log","info","uri","register","Inert","err","route","method","path","handler","request","reply","file","Path","join","__dirname","loginapi","WebpackPlugin","options","ext","continue","response","statusCode","memoryHistory","store","history","JSON","stringify","Routes","routes","redirect","props","message","code","pathname"],"mappings":";;AAAA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA,IAAMA,aAAa,SAAbA,UAAa;AAAA,gmBAU2CC,IAV3C;AAAA,CAAnB;;AA8BE,IAAMC,SAAS,IAAIC,eAAKC,MAAT,EAAf;AACAF,OAAOG,UAAP,CAAkB;AAChBC,QAAM;AADU,CAAlB;AAGAJ,OAAOK,KAAP,CAAa,YAAM;AACjBC,UAAQC,GAAR,2BAAoCP,OAAOQ,IAAP,CAAYC,GAAhD;AACD,CAFD;;AAIAT,OAAOU,QAAP,CAAgBC,eAAhB,EAAuB,UAACC,GAAD,EAAS;AAAC;AAC/B,MAAIA,GAAJ,EAAS;AACP,UAAMA,GAAN;AACD;AACF,CAJD;;AAMAZ,OAAOa,KAAP,CAAa;AACXC,UAAQ,KADG;AAEXC,QAAM,YAFK;AAGXC,WAAS,iBAACC,OAAD,EAAUC,KAAV,EAAoB;AAC3BA,UAAMC,IAAN,CAAWC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+BL,QAAQF,IAAvC,CAAX;AACD;AALU,CAAb;AAOAf,OAAOa,KAAP,CAAaU,eAAb;;AAEEvB,OAAOU,QAAP,CAAgB;AACdA,YAAUc,2BADI;AAEdC,WAAS;AAFK,CAAhB;;AAKFzB,OAAO0B,GAAP,CAAW,WAAX,EAAwB,UAACT,OAAD,EAAUC,KAAV,EAAmB;AACzCZ,UAAQC,GAAR,CAAYU,QAAQF,IAApB;AACAG,QAAMS,QAAN;AAAiB,CAFnB,E,CAEqB;;AAErB3B,OAAO0B,GAAP,CAAW,eAAX,EAA4B,UAACT,OAAD,EAAUC,KAAV,EAAoB;AAC9C,MAAI,OAAOD,QAAQW,QAAR,CAAiBC,UAAxB,KAAuC,WAA3C,EAAwD;AACtDvB,YAAQC,GAAR,CAAY,SAAZ;AACA,WAAOW,MAAMS,QAAN,EAAP;AACD;AACL;AACI,MAAMG,gBAAgB,sCAAoBb,QAAQF,IAA5B,CAAtB;AACA,MAAMgB,QAAQ,qBAAYD,aAAZ,CAAd;AACA,MAAME,UAAU,4CAAqBF,aAArB,EAAoCC,KAApC,CAAhB;;AAEDzB,UAAQC,GAAR,CAAY,aAAW0B,KAAKC,SAAL,CAAeC,gBAAf,CAAvB;;AAEC,0BAAM,EAAEH,gBAAF,EAAWI,QAAQD,gBAAnB,EAAN,EAAmC,UAACvB,GAAD,EAAMyB,QAAN,EAAgBC,KAAhB,EAA0B;AAC3DhC,YAAQC,GAAR,CAAY,SAAZ;AACA,QAAIK,GAAJ,EAAS;AACP;AACA,aAAOM,MAAMN,IAAI2B,OAAV,EAAmBC,IAAnB,CAAwB,GAAxB,CAAP;AACD;AACD,QAAIH,YAAYA,SAASI,QAAT,KAAsB,MAAtC,EAA8C;AAC5C,aAAOvB,MAAM,UAAN,EAAkBsB,IAAlB,CAAuB,GAAvB,CAAP;AACD;AACD,QAAIH,QAAJ,EAAc;AACZ;AACA,aAAOnB,MAAMmB,QAAN,CAAeA,QAAf,CAAP;AACD;AACD,QAAIC,KAAJ,EAAW;AACThC,cAAQC,GAAR,CAAY,YAAU0B,KAAKC,SAAL,CAAeI,KAAf,CAAtB;AACA;AACA,UAAMvC,OAAO,4BACX;AAAC,4BAAD;AAAA,UAAU,OAAOgC,KAAjB;AACA;AAAA;AAAA;AACE,wCAAC,0BAAD,EAAmBO,KAAnB;AADF;AADA,OADW,CAAb;AAMEhC,cAAQC,GAAR,CAAY,WAASR,IAArB;AACF,aAAOmB,MAAMpB,WAAWC,IAAX,CAAN,CAAP;AACD;AACC;AACF,WAAOmB,MAAM,WAAN,EAAmBsB,IAAnB,CAAwB,GAAxB,CAAP;AACD,GA3BD;AA4BD,CAxCD","file":"server.js","sourcesContent":["import Path from 'path';\nimport { renderToString } from 'react-dom/server';\nimport { RouterContext,match,createMemoryHistory } from 'react-router';\nimport { Provider } from 'react-redux';\nimport { syncHistoryWithStore } from 'react-router-redux';\nimport React from 'react';\nimport Hapi from 'hapi';\nimport Inert from 'inert';\nimport WebpackPlugin from 'hapi-webpack-plugin';\nimport Routes from './client/routes';\nimport CreateStore from './client/Stores/store';\nimport loginapi from './server/Login/login';\n\n\nconst renderPage = body => `<!DOCTYPE html>\n                    <html lang=\"en-us\">\n                    <head>\n                    <title>Business Insight</title>\n                    <link rel=\"stylesheet\" href=\"css/style.css\">\n                    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n                    <meta charset=\"utf-8\"/>\n                    <meta name=\"viewport\" content=\"width=device-width, height=device-height, minimum-scale=1.0, initial-scale=1.0, user-scalable=0\">\n                  </head>\n                        <body>\n                        <div id=\"app\"class=\"container\"><div>${body}</div></div>\n                        <div id=\"portal\"></div>\n                        <script type=\"text/javascript\"  src=\"/bundle.js\"></script>\n                        <script>\n                        var WebFontConfig = {\n                          google: { families: [ 'Roboto:400,300,500:latin' ] }\n                        };\n                        (function() {\n                          var wf = document.createElement('script');\n                          wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';\n                          wf.type = 'text/javascript';\n                          wf.async = 'true';\n                          var s = document.getElementsByTagName('script')[0];\n                          s.parentNode.insertBefore(wf, s);\n                        })();\n                      </script>\n                        </body>\n                    </html>`;\n\n\n  const server = new Hapi.Server();\n  server.connection({\n    port: 3002\n  });\n  server.start(() => {\n    console.log(`Server is running at ${server.info.uri}`);\n  });\n\n  server.register(Inert, (err) => {//to reply static resources like images\n    if (err) {\n      throw err;\n    }\n  });\n\n  server.route({\n    method: 'GET',\n    path: '/{params*}',\n    handler: (request, reply) => {\n      reply.file(Path.join(__dirname, 'static', request.path));\n    },\n  });\n  server.route(loginapi);\n\n    server.register({\n      register: WebpackPlugin,\n      options: './webpack.config.js',\n    });\n\n  server.ext('onRequest', (request, reply) =>{\n    console.log(request.path);\n    reply.continue()});//goto on preresponse\n\n  server.ext('onPreResponse', (request, reply) => {\n    if (typeof request.response.statusCode !== 'undefined') {\n      console.log(\"checkk1\");\n      return reply.continue();\n    }\n//server side rendering\n    const memoryHistory = createMemoryHistory(request.path);\n    const store = CreateStore(memoryHistory);\n    const history = syncHistoryWithStore(memoryHistory, store);\n    \n   console.log(\"routes: \"+JSON.stringify(Routes));\n\n    match({ history, routes: Routes }, (err, redirect, props) => {\n      console.log(\"checkk2\");\n      if (err) {\n        // there was an error somewhere during route matching\n        return reply(err.message).code(500);\n      }\n      if (redirect && redirect.pathname === '/404') {\n        return reply('404.html').code(404);\n      }\n      if (redirect) {\n        // route is entered, it can redirect. Here we handle on the server.\n        return reply.redirect(redirect);\n      }\n      if (props) {\n        console.log(\"props: \"+JSON.stringify(props));\n        // if we got props then we matched a route and can render. props are components return from matching\n        const body = renderToString(\n          <Provider store={store}>\n          <div>\n            <RouterContext {...props} />\n          </div>\n          </Provider>);\n          console.log(\"body: \"+body);\n        return reply(renderPage(body));\n      }\n        // no errors, no redirect, we just didn't match anything\n      return reply('Not Found').code(404);\n    });\n  });\n\n"]}