{"version":3,"sources":["../src/server1.js"],"names":["renderPage","body","server","Hapi","Server","connection","port","start","console","log","info","uri","register","Inert","err","route","method","path","handler","request","reply","file","Path","join","__dirname","loginapi","WebpackPlugin","options","ext","continue","response","statusCode","memoryHistory","store","history","routes","Routes","redirect","props","message","code","pathname","JSON","stringify","ReactDOMServer","renderToString"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA;AACA;;AAEA,IAAMA,aAAa,SAAbA,UAAa;AAAA,0VASIC,IATJ;AAAA,CAAnB;;AA6BE,IAAMC,SAAS,IAAIC,eAAKC,MAAT,EAAf;AACAF,OAAOG,UAAP,CAAkB;AAChBC,QAAM;AADU,CAAlB;AAGAJ,OAAOK,KAAP,CAAa,YAAM;AACjBC,UAAQC,GAAR,2BAAoCP,OAAOQ,IAAP,CAAYC,GAAhD;AACD,CAFD;;AAIAT,OAAOU,QAAP,CAAgBC,eAAhB,EAAuB,UAACC,GAAD,EAAS;AAAC;AAC/B,MAAIA,GAAJ,EAAS;AACP,UAAMA,GAAN;AACD;AACF,CAJD;;AAMAZ,OAAOa,KAAP,CAAa;AACXC,UAAQ,KADG;AAEXC,QAAM,YAFK;AAGXC,WAAS,iBAACC,OAAD,EAAUC,KAAV,EAAoB;AAC3BA,UAAMC,IAAN,CAAWC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+BL,QAAQF,IAAvC,CAAX;AACD;AALU,CAAb;AAOAf,OAAOa,KAAP,CAAaU,eAAb;AACF;AACA;;AAEIvB,OAAOU,QAAP,CAAgB;AACdA,YAAUc,2BADI;AAEdC,WAAS;AAFK,CAAhB;;AAKFzB,OAAO0B,GAAP,CAAW,WAAX,EAAwB,UAACT,OAAD,EAAUC,KAAV,EAAoB;AAACZ,UAAQC,GAAR,CAAYU,QAAQF,IAApB;AAC7CG,QAAMS,QAAN;AAAiB,CADjB,E,CACmB;;AAEnB3B,OAAO0B,GAAP,CAAW,eAAX,EAA4B,UAACT,OAAD,EAAUC,KAAV,EAAoB;AAC9C,MAAI,OAAOD,QAAQW,QAAR,CAAiBC,UAAxB,KAAuC,WAA3C,EAAwD;AACtDvB,YAAQC,GAAR,CAAY,SAAZ;AACA,WAAOW,MAAMS,QAAN,EAAP;AACD;AACL;AACI,MAAMG,gBAAgB,sCAAoBb,QAAQF,IAA5B,CAAtB;AACA,MAAMgB,QAAQ,qBAAYD,aAAZ,CAAd;AACA,MAAME,UAAU,4CAAqBF,aAArB,EAAoCC,KAApC,CAAhB;;AAGA,0BAAM,EAAEC,gBAAF,EAAWC,QAAQC,gBAAnB,EAAN,EAAmC,UAACtB,GAAD,EAAMuB,QAAN,EAAgBC,KAAhB,EAA0B;;AAE9D9B,YAAQC,GAAR,CAAY,SAAZ;AACG,QAAIK,GAAJ,EAAS;AACPN,cAAQC,GAAR,CAAY,UAAQK,IAAIyB,OAAxB;AACA;AACA,aAAOnB,MAAMN,IAAIyB,OAAV,EAAmBC,IAAnB,CAAwB,GAAxB,CAAP;AACD;AACD,QAAIH,YAAYA,SAASI,QAAT,KAAsB,MAAtC,EAA8C;AAC5CjC,cAAQC,GAAR,CAAY,eAAa4B,QAAb,GAAsB,kBAAtB,GAAyCA,SAASI,QAA9D;AACA,aAAOrB,MAAM,UAAN,EAAkBoB,IAAlB,CAAuB,GAAvB,CAAP;AACD;AACD,QAAIH,QAAJ,EAAc;AACZ7B,cAAQC,GAAR,CAAY,eAAa4B,QAAb,GAAsB,kBAAtB,GAAyCA,SAASI,QAA9D;AACA;AACA,aAAOrB,MAAMiB,QAAN,CAAeA,QAAf,CAAP;AACD;AACD,QAAIC,KAAJ,EAAW;AACT9B,cAAQC,GAAR,CAAY,YAAUiC,KAAKC,SAAL,CAAeL,KAAf,CAAtB;AACA;AACA,UAAMrC,OAAO2C,iBAAeC,cAAf,CACX;AAAC,4BAAD;AAAA,UAAU,OAAOZ,KAAjB;AACA;AAAA;AAAA;AACE,wCAAC,0BAAD,EAAmBK,KAAnB;AADF;AADA,OADW,CAAb;AAME9B,cAAQC,GAAR,CAAY,WAASR,IAArB;AACF,aAAOmB,MAAMpB,WAAWC,IAAX,CAAN,CAAP;AACA;AACD;AACC;AACF,WAAOmB,MAAM,WAAN,EAAmBoB,IAAnB,CAAwB,GAAxB,CAAP;AACD,GAhCD;AAiCD,CA5CD","file":"server1.js","sourcesContent":["import Path from 'path';\nimport ReactDOMServer from 'react-dom/server';\nimport { RouterContext,match,createMemoryHistory } from 'react-router';\nimport { Provider } from 'react-redux';\nimport { syncHistoryWithStore } from 'react-router-redux';\nimport React from 'react';\nimport Hapi from 'hapi';\nimport Inert from 'inert';\nimport WebpackPlugin from 'hapi-webpack-plugin';\nimport Routes from './client/routes';\nimport CreateStore from './client/Stores/store';\nimport loginapi from './server/Login/login';\n// import api from './server/signup/signup';\n// import additemapi from './server/additem/additem';\n\nconst renderPage = body => `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta charset=\"utf-8\"/>\n  <meta name=\"viewport\" content=\"width=device-width, height=device-height, minimum-scale=1.0, initial-scale=1.0, user-scalable=0\">\n  <title>Business Insight</title>\n</head>\n<body>\n  <div id=\"app\"><div>${body}</div></div>\n\n  <!--  Roboto font -->\n  <script>\n    var WebFontConfig = {\n      google: { families: [ 'Roboto:400,300,500:latin' ] }\n    };\n    (function() {\n      var wf = document.createElement('script');\n      wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';\n      wf.type = 'text/javascript';\n      wf.async = 'true';\n      var s = document.getElementsByTagName('script')[0];\n      s.parentNode.insertBefore(wf, s);\n    })();\n  </script>\n</body>\n</html>`;\n\n\n  const server = new Hapi.Server();\n  server.connection({\n    port: 3002\n  });\n  server.start(() => {\n    console.log(`Server is running at ${server.info.uri}`);\n  });\n\n  server.register(Inert, (err) => {//to reply static resources like images\n    if (err) {\n      throw err;\n    }\n  });\n\n  server.route({\n    method: 'GET',\n    path: '/{params*}',\n    handler: (request, reply) => {\n      reply.file(Path.join(__dirname, 'static', request.path));\n    },\n  });\n  server.route(loginapi);\n//   server.route(api);\n//   server.route(additemapi);\n\n    server.register({\n      register: WebpackPlugin,\n      options: './webpack.config.js',\n    });\n\n  server.ext('onRequest', (request, reply) => {console.log(request.path);\n  reply.continue()});//goto on preresponse\n\n  server.ext('onPreResponse', (request, reply) => {\n    if (typeof request.response.statusCode !== 'undefined') {\n      console.log(\"checkk1\");\n      return reply.continue();\n    }\n//server side rendering\n    const memoryHistory = createMemoryHistory(request.path);\n    const store = CreateStore(memoryHistory);\n    const history = syncHistoryWithStore(memoryHistory, store);\n    \n\n    match({ history, routes: Routes }, (err, redirect, props) => {\n     \n   console.log(\"checkk2\");\n      if (err) {\n        console.log(\"err: \"+err.message);\n        // there was an error somewhere during route matching\n        return reply(err.message).code(500);\n      }\n      if (redirect && redirect.pathname === '/404') {\n        console.log(\"redirect: \"+redirect+\"  redirectpath: \"+redirect.pathname);\n        return reply('404.html').code(404);\n      }\n      if (redirect) {\n        console.log(\"redirect: \"+redirect+\"  redirectpath: \"+redirect.pathname);\n        // route is entered, it can redirect. Here we handle on the server.\n        return reply.redirect(redirect);\n      }\n      if (props) {\n        console.log(\"props: \"+JSON.stringify(props));\n        // if we got props then we matched a route and can render. props are components return from matching\n        const body = ReactDOMServer.renderToString(\n          <Provider store={store}>\n          <div>\n            <RouterContext {...props} />\n          </div>\n          </Provider>);\n          console.log(\"body: \"+body)\n        return reply(renderPage(body));\n        //return reply();\n      }\n        // no errors, no redirect, we just didn't match anything\n      return reply('Not Found').code(404);\n    });\n  });\n\n"]}